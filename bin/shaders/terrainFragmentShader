#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Colour;

uniform sampler2D backTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform float ambientLight;
uniform vec3 skyColour;


void main(void){

	vec4 blendMapColour = texture(blendMap, pass_textureCoords);
	
	float backTextureAmount = 1 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);
	vec2 titleCoords = pass_textureCoords * 40.0;
	vec4 backTextureColour = texture(backTexture, titleCoords) * backTextureAmount;
	vec4 rTextureColour = texture(rTexture, titleCoords) * blendMapColour.r;
	vec4 gTextureColour = texture(gTexture, titleCoords) * blendMapColour.g;
	vec4 bTextureColour = texture(bTexture, titleCoords) * blendMapColour.b;
	
	vec4 totalColour = backTextureColour + rTextureColour + gTextureColour + bTextureColour;

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDotl = dot(unitNormal,unitLightVector);
	float brightness = max(nDotl,ambientLight);
	vec3 diffuse = brightness * lightColour;
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	
	float specularFactor = dot(unitVectorToCamera, reflectedLightDirection);
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor,shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColour;
	
	out_Colour = vec4(diffuse,1.0) * totalColour + vec4(finalSpecular, 1.0);
	out_Colour = mix(vec4(skyColour, 1.0),out_Colour, visibility);
	
	

}